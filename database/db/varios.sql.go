// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: varios.sql

package db

import (
	"context"
)

const groupByChatID = `-- name: GroupByChatID :one
SELECT id, chat_id FROM grupo WHERE chat_id = ?
`

func (q *Queries) GroupByChatID(ctx context.Context, chatID int64) (Grupo, error) {
	row := q.db.QueryRowContext(ctx, groupByChatID, chatID)
	var i Grupo
	err := row.Scan(&i.ID, &i.ChatID)
	return i, err
}

const insertGroupBattle = `-- name: InsertGroupBattle :exec
INSERT INTO grupo_battle (grupo_id, battle_log_id) VALUES (?, ?)
`

type InsertGroupBattleParams struct {
	GrupoID     int64
	BattleLogID int64
}

func (q *Queries) InsertGroupBattle(ctx context.Context, arg InsertGroupBattleParams) error {
	_, err := q.db.ExecContext(ctx, insertGroupBattle, arg.GrupoID, arg.BattleLogID)
	return err
}

const insertPlayerBattle = `-- name: InsertPlayerBattle :exec
INSERT INTO player_battle (player_id, battle_log_id) VALUES (?, ?)
`

type InsertPlayerBattleParams struct {
	PlayerID    int64
	BattleLogID int64
}

func (q *Queries) InsertPlayerBattle(ctx context.Context, arg InsertPlayerBattleParams) error {
	_, err := q.db.ExecContext(ctx, insertPlayerBattle, arg.PlayerID, arg.BattleLogID)
	return err
}
